'use client';

import { Inter as FontSans } from 'next/font/google';
import './globals.css';

import ClientProviders from '@/features/shared/components/ClientProviders';

import Header from '@/features/ui/components/Header';

import { cn } from '@/features/shadcn/utils';
import { useEffect, useState } from 'react';

const fontSans = FontSans({
  subsets: ['latin'],
  variable: '--font-sans',
});

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export interface themeProps {
  theme?: 'light' | 'dark';
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [theme, setTheme] = useState<themeProps['theme']>();

  useEffect(() => {
    const storageTheme = localStorage.getItem('theme') as themeProps['theme'];
    setTheme(storageTheme);
  }, []);

  useEffect(() => {
    if (theme && theme === 'dark') {
      document.documentElement.classList.add('dark');
      document.documentElement.classList.remove('light');
      localStorage.setItem('theme', 'dark');
    } else if (theme && theme === 'light') {
      document.documentElement.classList.add('light');
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [theme]);

  if (!theme) {
    return (
      <html>
        <body></body>
      </html>
    );
  }

  return (
    <html
      lang='en'
      className={theme}
      suppressHydrationWarning={true}
    >
      <body
        className={cn('min-h-screen max-h-max font-sans antialiased', fontSans.variable)}
        suppressHydrationWarning={true}
      >
        <ClientProviders>
          <Header
            theme={theme}
            setTheme={setTheme}
          />
          {children}
        </ClientProviders>
      </body>
    </html>
  );
}
